<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>register_file</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,reset,reg_write,rs1_addr:5,rs2_addr:5,rd_addr:5,rd_data:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity register_file is
    port (
        clk      : in  std_logic;
        reset    : in  std_logic;
        reg_write: in  std_logic; -- Control signal to enable writing
        rs1_addr : in  std_logic_vector(4 downto 0);
        rs2_addr : in  std_logic_vector(4 downto 0);
        rd_addr  : in  std_logic_vector(4 downto 0);
        rd_data  : in  std_logic_vector(31 downto 0);
        rs1_data : out std_logic_vector(31 downto 0);
        rs2_data : out std_logic_vector(31 downto 0)
    );
end entity register_file;

architecture behavioral of register_file is
    -- Define the storage for 32 registers, each 32 bits wide
    type reg_array is array (0 to 31) of std_logic_vector(31 downto 0);
    signal registers : reg_array := (others =&gt; (others =&gt; &apos;0&apos;));

begin

    -- Reset Process: Asynchronous reset to clear all registers
    reset_proc: process(reset)
    begin
        if reset = &apos;1&apos; then
            -- Clear all registers to zero on reset
            for i in 0 to 31 loop
                registers(i) &lt;= (others =&gt; &apos;0&apos;);
            end loop;
        end if;
    end process reset_proc;

    -- Read Process: Synchronous to the rising edge (first half of the clock)
    read_proc: process(clk)
    begin
        if rising_edge(clk) then
            -- Read rs1. Reading x0 always returns zero.
            if rs1_addr = &quot;00000&quot; then
                rs1_data &lt;= (others =&gt; &apos;0&apos;);
            else
                rs1_data &lt;= registers(to_integer(unsigned(rs1_addr)));
            end if;

            -- Read rs2. Reading x0 always returns zero.
            if rs2_addr = &quot;00000&quot; then
                rs2_data &lt;= (others =&gt; &apos;0&apos;);
            else
                rs2_data &lt;= registers(to_integer(unsigned(rs2_addr)));
            end if;
        end if;
    end process read_proc;

    -- Write Process: Synchronous to the falling edge (second half of the clock)
    write_proc: process(clk)
    begin
        if falling_edge(clk) then
            -- Write only if reg_write is enabled and the destination is not x0
            if reg_write = &apos;1&apos; and rd_addr /= &quot;00000&quot; then
                registers(to_integer(unsigned(rd_addr))) &lt;= rd_data;
            end if;
        end if;
    end process write_proc;

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>rs1_data:32,rs2_data:32</string>
        </entry>
      </elementAttributes>
      <pos x="620" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>instruction_parser</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>instruction_i:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;

entity instruction_parser is
    port (
        instruction_i : in  std_logic_vector(31 downto 0); -- 32-bit RISC-V instruction

        -- Extracted fields
        opcode_o      : out std_logic_vector(6 downto 0);  -- bits 6-0
        rd_o          : out std_logic_vector(4 downto 0);  -- bits 11-7
        funct_3       : out std_logic_vector(2 downto 0);  -- bits 14-12
        rs1_o         : out std_logic_vector(4 downto 0);  -- bits 19-15
        rs2_o         : out std_logic_vector(4 downto 0); -- bits 24-20
        funct_7       : out std_logic_vector(6 downto 0)
    );
end entity instruction_parser;

architecture behavioral of instruction_parser is
begin

    -- Simple direct assignments for common fields
    opcode_o &lt;= instruction_i(6 downto 0);
    rd_o     &lt;= instruction_i(11 downto 7);
    funct_3  &lt;= instruction_i(14 downto 12);
    rs1_o    &lt;= instruction_i(19 downto 15);
    rs2_o    &lt;= instruction_i(24 downto 20);
    funct_7  &lt;= instruction_i(31 downto 25);

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>opcode_o:7,rd_o:5,funct_3:3,rs1_o:5,rs2_o:5,funct_7:7</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="40" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>control_unit</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>opcode:7</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;

entity control_unit is
    port (
        -- Inputs
        opcode      : in  std_logic_vector(6 downto 0); -- 7-bit opcode from the instruction

        -- Outputs: Control signals for the datapath
        alu_op      : out std_logic_vector(1 downto 0); -- Controls the ALU&apos;s main operation:
                                                  -- &quot;00&quot; = Add (for Loads/Stores/AUIPC/LUI/JAL/JALR address calc or pass-through)
                                                  -- &quot;01&quot; = Subtract (for Branches for comparison)
                                                  -- &quot;10&quot; = R-type operation (further decoded by funct3/funct7)
                                                  -- &quot;11&quot; = I-type operation (further decoded by funct3)
        alu_src     : out std_logic;              -- Selects the second ALU source:
                                                  -- &apos;0&apos; = rs2 data (for R-type)
                                                  -- &apos;1&apos; = immediate (for I, S, B, U, J-types)
        mem_read    : out std_logic;              -- Enables reading from data memory
        mem_write   : out std_logic;              -- Enables writing to data memory
        mem_to_reg  : out std_logic;              -- Selects if data from memory goes to the register file (for loads)
        reg_write   : out std_logic;              -- Enable writing to the register file
        branch      : out std_logic;              -- Indicates a conditional branch instruction
        jump        : out std_logic              -- Indicates an unconditional jump instruction (JAL, JALR)

    );
end entity control_unit;

architecture behavioral of control_unit is
    -- Define the opcodes for different instruction types as constants for readability
    constant R_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0110011&quot;; -- OP (e.g., ADD, SUB, AND, OR, XOR)
    constant I_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0010011&quot;; -- OP-IMM (e.g., ADDI, ANDI, ORI)
    constant L_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0000011&quot;; -- LOAD (e.g., LW)
    constant S_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0100011&quot;; -- STORE (e.g., SW)
    constant B_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;1100011&quot;; -- BRANCH (e.g., BEQ, BNE)
    constant JAL_OP      : std_logic_vector(6 downto 0) := &quot;1101111&quot;; -- JAL (Jump and Link)
    constant JALR_OP     : std_logic_vector(6 downto 0) := &quot;1100111&quot;; -- JALR (Jump and Link Register)
    constant LUI_OP      : std_logic_vector(6 downto 0) := &quot;0110111&quot;; -- LUI (Load Upper Immediate)
    constant AUIPC_OP    : std_logic_vector(6 downto 0) := &quot;0010111&quot;; -- AUIPC (Add Upper Immediate to PC)

begin

    -- Main control logic process.
    -- This process is sensitive to both &apos;reset&apos; and &apos;opcode&apos;.
    -- All output signals must be assigned within this single process to avoid latches.
    process(opcode)
    begin
        -- safe default (e.g., NOP-like behavior, no writes, no branches/jumps).
        reg_write  &lt;= &apos;0&apos;;
        mem_to_reg &lt;= &apos;0&apos;;
        mem_read   &lt;= &apos;0&apos;;
        mem_write  &lt;= &apos;0&apos;;
        alu_src    &lt;= &apos;0&apos;;
        branch     &lt;= &apos;0&apos;;
        jump       &lt;= &apos;0&apos;;
        alu_op     &lt;= &quot;00&quot;; -- Default to &quot;00&quot; (Add/Pass-through) for ALU

        -- Use a case statement to decode the opcode and assert specific control signals.
        case opcode is
            -- R-Type instructions (e.g., ADD, SUB, AND, OR)
            -- Perform register-to-register operations, write result back to register file.
            when R_TYPE_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file
                alu_src    &lt;= &apos;0&apos;;     -- Second ALU operand comes from rs2 (register value)
                alu_op     &lt;= &quot;10&quot;;    -- ALU performs R-type specific operation (decoded by ALU Control)

            -- I-Type instructions (Arithmetic/Logical with Immediate, excluding Loads/JALR)
            -- (e.g., ADDI, ANDI, ORI)
            -- Perform operation with immediate, write result back to register file.
            when I_TYPE_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file
                alu_src    &lt;= &apos;1&apos;;     -- Second ALU operand comes from immediate
                alu_op     &lt;= &quot;11&quot;;    -- ALU performs I-type specific operation (decoded by ALU Control)

            -- Load instructions (I-type, e.g., LW)
            -- Calculate memory address using immediate, read from memory, write to register file.
            when L_TYPE_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file
                mem_to_reg &lt;= &apos;1&apos;;     -- Data from memory is written to reg file
                mem_read   &lt;= &apos;1&apos;;     -- Enable memory read
                alu_src    &lt;= &apos;1&apos;;     -- Second ALU operand is immediate (for address calculation)
                alu_op     &lt;= &quot;00&quot;;    -- ALU performs addition (base register + immediate offset)

            -- Store instructions (S-type, e.g., SW)
            -- Calculate memory address using immediate, write to memory.
            when S_TYPE_OP =&gt;
                mem_write  &lt;= &apos;1&apos;;     -- Enable memory write
                alu_src    &lt;= &apos;1&apos;;     -- Second ALU operand is immediate (for address calculation)
                alu_op     &lt;= &quot;00&quot;;    -- ALU performs addition (base register + immediate offset)

            -- Branch instructions (B-type, e.g., BEQ, BNE)
            -- Compare two registers, enable branch if condition met.
            when B_TYPE_OP =&gt;
                branch     &lt;= &apos;1&apos;;     -- Indicate a branch instruction
                alu_op     &lt;= &quot;01&quot;;    -- ALU performs subtraction (for comparison)

            -- LUI (Load Upper Immediate)
            -- Loads a 20-bit immediate into the upper 20 bits of a register, clearing lower 12.
            when LUI_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file
                alu_src    &lt;= &apos;1&apos;;     -- Immediate is used by ALU (often conceptually for a pass-through or add 0)
                alu_op     &lt;= &quot;00&quot;;    -- ALU performs addition (effectively passes the immediate)

            -- AUIPC (Add Upper Immediate to PC)
            -- Adds a 20-bit immediate (shifted) to the PC, writes to register.
            when AUIPC_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file
                alu_src    &lt;= &apos;1&apos;;     -- Immediate is used by ALU
                alu_op     &lt;= &quot;00&quot;;    -- ALU performs addition (PC + immediate)

            -- JAL (Jump and Link)
            -- Unconditional jump, saves PC+4 to rd.
            when JAL_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file (for PC+4)
                jump       &lt;= &apos;1&apos;;     -- Indicate an unconditional jump
                alu_op     &lt;= &quot;00&quot;;    -- ALU may be used to calculate target address (PC + immediate) or pass PC+4

            -- JALR (Jump and Link Register)
            -- Unconditional jump to (rs1 + immediate), saves PC+4 to rd.
            when JALR_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file (for PC+4)
                jump       &lt;= &apos;1&apos;;     -- Indicate an unconditional jump
                alu_src    &lt;= &apos;1&apos;;     -- Immediate is used by ALU (for address calculation)
                alu_op     &lt;= &quot;00&quot;;    -- ALU performs addition (rs1 + immediate)

            -- Default case for any other undefined or unsupported opcodes.
            -- All control signals remain in their default inactive state.
            when others =&gt;
                null; -- Explicitly do nothing, as defaults are set above.
        end case;
    end process;

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>alu_op:2,alu_src,mem_read,mem_write,mem_to_reg,reg_write,branch,jump</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="640" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>immediate_extractor</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>instruction_i:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all; -- For signed arithmetic and type conversions

entity immediate_extractor is
    port (
        instruction_i : in  std_logic_vector(31 downto 0); -- 32-bit RISC-V instruction input
        immediate_o   : out std_logic_vector(31 downto 0)  -- 32-bit sign-extended immediate output
    );
end entity immediate_extractor;

architecture behavioral of immediate_extractor is
    -- Internal signal to hold the opcode (bits 6 downto 0) for use in the process.
    signal opcode_s : std_logic_vector(6 downto 0);
begin

    -- Extract the opcode from the instruction. This assignment is concurrent.
    opcode_s &lt;= instruction_i(6 downto 0);

    -- This process block implements the combinational logic for immediate extraction.
    -- The sensitivity list includes all signals that, when changed, should
    -- re-evaluate the logic inside the process.
    process(instruction_i, opcode_s)
        -- Declare a local variable to build the immediate value before assigning it
        -- to the output signal. Variables are evaluated immediately within the process.
        variable imm : std_logic_vector(31 downto 0);
    begin
        -- Use a case statement to select the immediate extraction logic
        -- based on the instruction&apos;s opcode.
        case opcode_s is
            -- I-type immediate (Load, Op-Imm, JALR)
            -- Opcode values: 0x03 (LOAD), 0x13 (OP-IMM), 0x67 (JALR)
            -- Format: imm[11:0] is instruction[31:20]
            when &quot;0000011&quot; | &quot;0010011&quot; | &quot;1100111&quot; =&gt;
                -- Sign-extend the 12-bit immediate: replicate bit 31 of the instruction
                -- (which is imm[11]) across the higher bits (31 downto 12) of the 32-bit immediate.
                imm := (others =&gt; instruction_i(31));
                -- Place the 12-bit immediate into the lower 12 bits of &apos;imm&apos;.
                imm(11 downto 0) := instruction_i(31 downto 20);
                -- Assign the constructed immediate to the output.
                immediate_o &lt;= imm;

            -- S-type immediate (Store)
            -- Opcode value: 0x23 (STORE)
            -- Format: imm[11:5] from instruction[31:25], imm[4:0] from instruction[11:7]
            -- Reconstructed: imm[11:5] &lt;&lt; 5 | imm[4:0]
            when &quot;0100011&quot; =&gt;
                -- Sign-extend the 12-bit immediate: use bit 31 of the instruction
                -- (which is imm[11]) for sign extension.
                imm := (others =&gt; instruction_i(31));
                -- Place the high part of the immediate (imm[11:5]) into its position.
                imm(11 downto 5) := instruction_i(31 downto 25);
                -- Place the low part of the immediate (imm[4:0]) into its position.
                imm(4 downto 0)  := instruction_i(11 downto 7);
                -- Assign the constructed immediate to the output.
                immediate_o &lt;= imm;

            -- B-type immediate (Branch)
            -- Opcode value: 0x63 (BRANCH)
            -- Format: imm[12|10:5|4:1|11]
            -- Bits: instruction[31] (imm[12]), instruction[30:25] (imm[10:5]),
            --       instruction[11:8] (imm[4:1]), instruction[7] (imm[11])
            -- Reconstructed: imm[12] &lt;&lt; 12 | imm[11] &lt;&lt; 11 | imm[10:5] &lt;&lt; 5 | imm[4:1] &lt;&lt; 1 (imm[0] is always &apos;0&apos;)
            when &quot;1100011&quot; =&gt;
                -- Sign-extend the 13-bit immediate: use bit 31 of the instruction
                -- (which is imm[12]) for sign extension.
                imm := (others =&gt; instruction_i(31));
                -- Place fragmented immediate bits into their correct positions.
                imm(12)        := instruction_i(31);         -- imm[12]
                imm(11)        := instruction_i(7);          -- imm[11]
                imm(10 downto 5) := instruction_i(30 downto 25); -- imm[10:5]
                imm(4 downto 1) := instruction_i(11 downto 8);  -- imm[4:1]
                imm(0)         := &apos;0&apos;;                       -- imm[0] is always 0 for branches
                -- Assign the constructed immediate to the output.
                immediate_o &lt;= imm;

            -- U-type immediate (LUI, AUIPC)
            -- Opcode values: 0x37 (LUI), 0x17 (AUIPC)
            -- Format: imm[31:12] is instruction[31:12]
            -- This immediate is already effectively shifted left by 12 bits.
            when &quot;0110111&quot; | &quot;0010111&quot; =&gt;
                -- Concatenate the upper 20 bits of the instruction with 12 zeros.
                -- No explicit sign extension needed, as the value is simply the upper bits.
                imm := instruction_i(31 downto 12) &amp; (11 downto 0 =&gt; &apos;0&apos;);
                -- Assign the constructed immediate to the output.
                immediate_o &lt;= imm;

            -- J-type immediate (JAL)
            -- Opcode value: 0x6F (JAL)
            -- Format: imm[20|10:1|11|19:12]
            -- Bits: instruction[31] (imm[20]), instruction[19:12] (imm[19:12]),
            --       instruction[20] (imm[11]), instruction[30:21] (imm[10:1])
            -- Reconstructed: imm[20] &lt;&lt; 20 | imm[19:12] &lt;&lt; 12 | imm[11] &lt;&lt; 11 | imm[10:1] &lt;&lt; 1 (imm[0] is always &apos;0&apos;)
            when &quot;1101111&quot; =&gt;
                -- Sign-extend the 21-bit immediate: use bit 31 of the instruction
                -- (which is imm[20]) for sign extension.
                imm := (others =&gt; instruction_i(31));
                -- Place fragmented immediate bits into their correct positions.
                imm(20)        := instruction_i(31);         -- imm[20]
                imm(19 downto 12) := instruction_i(19 downto 12); -- imm[19:12]
                imm(11)        := instruction_i(20);         -- imm[11]
                imm(10 downto 1) := instruction_i(30 downto 21); -- imm[10:1]
                imm(0)         := &apos;0&apos;;                       -- imm[0] is always 0 for jumps
                -- Assign the constructed immediate to the output.
                immediate_o &lt;= imm;

            -- Default case: For unrecognized opcodes, output all zeros.
            when others =&gt;
                imm := (others =&gt; &apos;0&apos;);
                immediate_o &lt;= imm;
        end case;
    end process;

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>immediate_o:32</string>
        </entry>
      </elementAttributes>
      <pos x="580" y="680"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="560" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>dec</intFormat>
        </entry>
      </elementAttributes>
      <pos x="360" y="720"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>dec</intFormat>
        </entry>
      </elementAttributes>
      <pos x="380" y="760"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>dec</intFormat>
        </entry>
      </elementAttributes>
      <pos x="400" y="800"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>ID_EX_Pipeline</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,reset,ALUOp_in:2,ALUSrc_in,memRead_in,memWrite_in,memToReg_in,regWrite_in,branch_in,jump_in,Rs1_data_in:32,Rs2_data_in:32,Imm_in:32,Rs1_in:5,Rs2_in:5,Rd_in:5,PC_in:32,funct_3_in:3,funct_7_in:7,bubble</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ID_EX_Pipeline is
    Port (
        clk           : in  std_logic;
        reset         : in  std_logic;

        -- Control signals
        ALUOp_in      : in  std_logic_vector(1 downto 0);
        ALUSrc_in     : in  std_logic;
        memRead_in   : in  std_logic;
        memWrite_in  : in  std_logic;
        memToReg_in  : in  std_logic;
        regWrite_in  : in  std_logic;
        branch_in    : in  std_logic;
        jump_in      : in  std_logic;
        -- Data signals
        Rs1_data_in  : in  std_logic_vector(31 downto 0);
        Rs2_data_in  : in  std_logic_vector(31 downto 0);
        Imm_in : in  std_logic_vector(31 downto 0);
        Rs1_in         : in  std_logic_vector(4 downto 0);
        Rs2_in         : in  std_logic_vector(4 downto 0);
        Rd_in         : in  std_logic_vector(4 downto 0);
        PC_in         : in std_logic_vector(31 downto 0);
        funct_3_in      : in  std_logic_vector(2 downto 0);
        funct_7_in      : in  std_logic_vector(6 downto 0); 
        
        bubble        : in std_logic; -- Input de bubble síncrono

        -- Control outputs
        ALUOp_out     : out std_logic_vector(1 downto 0);
        ALUSrc_out    : out std_logic;
        memRead_out   : out std_logic;
        memWrite_out  : out std_logic;
        memToReg_out  : out std_logic;
        regWrite_out  : out std_logic;
        branch_out    : out std_logic;
        jump_out      : out std_logic;
        -- Data outputs
        Rs1_data_out       : out std_logic_vector(31 downto 0);
        Rs2_data_out       : out std_logic_vector(31 downto 0);
        Imm_out       : out std_logic_vector(31 downto 0);
        Rs1_out       : out std_logic_vector(4 downto 0);
        Rs2_out       : out std_logic_vector(4 downto 0);
        Rd_out        : out std_logic_vector(4 downto 0);
        PC_out        : out std_logic_vector(31 downto 0);
        funct_3_out     : out  std_logic_vector(2 downto 0);
        funct_7_5     : out  std_logic
    );
end ID_EX_Pipeline;

architecture Behavioral of ID_EX_Pipeline is
begin
    process(clk, reset)
    begin
        if reset = &apos;1&apos; then
            -- On reset, clear all outputs
            ALUOp_out      &lt;= (others =&gt; &apos;0&apos;);
            ALUSrc_out     &lt;= &apos;0&apos;;
            memRead_out    &lt;= &apos;0&apos;;
            memWrite_out   &lt;= &apos;0&apos;;
            memToReg_out   &lt;= &apos;0&apos;;
            regWrite_out   &lt;= &apos;0&apos;;
            branch_out     &lt;= &apos;0&apos;;
            jump_out       &lt;= &apos;0&apos;;
            Rs1_data_out       &lt;= (others =&gt; &apos;0&apos;);
            Rs2_data_out       &lt;= (others =&gt; &apos;0&apos;);
            Imm_out       &lt;= (others =&gt; &apos;0&apos;);
            Rs1_out         &lt;= (others =&gt; &apos;0&apos;);
            Rs2_out         &lt;= (others =&gt; &apos;0&apos;);
            Rd_out         &lt;= (others =&gt; &apos;0&apos;);
            PC_out         &lt;= (others =&gt; &apos;0&apos;);
        elsif rising_edge(clk) then
            if bubble = &apos;1&apos; then
                ALUOp_out      &lt;= (others =&gt; &apos;0&apos;);
                ALUSrc_out     &lt;= &apos;0&apos;;
                memRead_out    &lt;= &apos;0&apos;;
                memWrite_out   &lt;= &apos;0&apos;;
                memToReg_out   &lt;= &apos;0&apos;;
                regWrite_out   &lt;= &apos;0&apos;;
                branch_out     &lt;= &apos;0&apos;;
                jump_out       &lt;= &apos;0&apos;;
                Rs1_data_out       &lt;= (others =&gt; &apos;0&apos;);
                Rs2_data_out       &lt;= (others =&gt; &apos;0&apos;);
                Imm_out       &lt;= (others =&gt; &apos;0&apos;);
                Rs1_out         &lt;= (others =&gt; &apos;0&apos;);
                Rs2_out         &lt;= (others =&gt; &apos;0&apos;);
                Rd_out         &lt;= (others =&gt; &apos;0&apos;);
                PC_out         &lt;= (others =&gt; &apos;0&apos;);
            else
                -- On clock edge, latch inputs to outputs
                ALUOp_out      &lt;= ALUOp_in;
                ALUSrc_out     &lt;= ALUSrc_in;
                memRead_out    &lt;= memRead_in;
                memWrite_out   &lt;= memWrite_in;
                memToReg_out   &lt;= memToReg_in;
                regWrite_out   &lt;= regWrite_in;
                branch_out     &lt;= branch_in;
                jump_out       &lt;= jump_in;
                Rs1_data_out       &lt;= Rs1_data_in;
                Rs2_data_out       &lt;= Rs2_data_in;
                Imm_out       &lt;= Imm_in;
                Rs1_out         &lt;= Rs1_in;
                Rs2_out         &lt;= Rs2_in;
                Rd_out         &lt;= Rd_in;
                PC_out &lt;= PC_in;
                funct_3_out &lt;= funct_3_in;
                funct_7_5 &lt;= funct_7_in(5);
            end if;
        end if;
    end process;
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>ALUOp_out:2,ALUSrc_out,memRead_out,memWrite_out,memToReg_out,regWrite_out,branch_out,jump_out,Rs1_data_out:32,Rs2_data_out:32,Imm_out:32,Rs1_out:5,Rs2_out:5,Rd_out:5,PC_out:32,funct_3_out:3,funct_7_5</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="1200" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>decSigned</intFormat>
        </entry>
      </elementAttributes>
      <pos x="920" y="800"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="660" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="700" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="740" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="780" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="820" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="860" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="900" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="940" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>EX_MEM_Pipeline</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,reset,MemRead_in,MemWrite_in,MemToReg_in,RegWrite_in,branch_in,jump_in,ALUResult_in:32,WriteData_in:32,Rd_in:5,zero_in,branch_target_in:32,bubble</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity EX_MEM_Pipeline is
    Port (
        clk          : in  std_logic;
        reset        : in  std_logic;

        -- Control signals
        MemRead_in   : in  std_logic;
        MemWrite_in  : in  std_logic;
        MemToReg_in  : in  std_logic;
        RegWrite_in  : in  std_logic;
        branch_in    : in  std_logic;
        jump_in      : in  std_logic;
        -- Data signals
        ALUResult_in : in  std_logic_vector(31 downto 0);
        WriteData_in : in  std_logic_vector(31 downto 0);
        Rd_in       : in  std_logic_vector(4 downto 0);
        zero_in       : in  std_logic;
        branch_target_in : in  std_logic_vector(31 downto 0);

        bubble       : in std_logic; -- Entrada de bubble síncrona

        -- Outputs to MEM stage
        MemRead_out  : out std_logic;
        MemWrite_out : out std_logic;
        MemToReg_out : out std_logic;
        RegWrite_out : out std_logic;
        ALUResult_out: out std_logic_vector(31 downto 0);
        WriteData_out: out std_logic_vector(31 downto 0);
        Rd_out       : out std_logic_vector(4 downto 0);
        branch_out   : out std_logic;
        jump_out     : out std_logic;
        zero_out     : out std_logic;
        branch_target_out : out std_logic_vector(31 downto 0)
    );
end EX_MEM_Pipeline;

architecture Behavioral of EX_MEM_Pipeline is
begin
    process(clk, reset)
    begin
        if reset = &apos;1&apos; then
            MemRead_out   &lt;= &apos;0&apos;;
            MemWrite_out  &lt;= &apos;0&apos;;
            RegWrite_out  &lt;= &apos;0&apos;;
            MemToReg_out  &lt;= &apos;0&apos;;
            ALUResult_out &lt;= (others =&gt; &apos;0&apos;);
            WriteData_out &lt;= (others =&gt; &apos;0&apos;);
            Rd_out   &lt;= (others =&gt; &apos;0&apos;);
            jump_out      &lt;= &apos;0&apos;;
            branch_out    &lt;= &apos;0&apos;;
            zero_out      &lt;= &apos;0&apos;;
            branch_target_out &lt;= (others =&gt; &apos;0&apos;);
        elsif rising_edge(clk) then
            if bubble = &apos;1&apos; then

                MemRead_out   &lt;= &apos;0&apos;;
                MemWrite_out  &lt;= &apos;0&apos;;
                RegWrite_out  &lt;= &apos;0&apos;;
                MemToReg_out  &lt;= &apos;0&apos;;
                ALUResult_out &lt;= (others =&gt; &apos;0&apos;);
                WriteData_out &lt;= (others =&gt; &apos;0&apos;);
                Rd_out   &lt;= (others =&gt; &apos;0&apos;);
                jump_out      &lt;= &apos;0&apos;;
                branch_out    &lt;= &apos;0&apos;;
                zero_out      &lt;= &apos;0&apos;;
                branch_target_out &lt;= (others =&gt; &apos;0&apos;);

            else
                MemRead_out   &lt;= MemRead_in;
                MemWrite_out  &lt;= MemWrite_in;
                RegWrite_out  &lt;= RegWrite_in;
                MemToReg_out  &lt;= MemToReg_in;
                ALUResult_out &lt;= ALUResult_in;
                WriteData_out &lt;= WriteData_in;
                Rd_out   &lt;= Rd_in;
                jump_out      &lt;= jump_in;
                branch_out    &lt;= branch_in;
                zero_out      &lt;= zero_in;
                branch_target_out &lt;= branch_target_in;
            end if;
        end if;
    end process;
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>MemRead_out,MemWrite_out,MemToReg_out,RegWrite_out,ALUResult_out:32,WriteData_out:32,Rd_out:5,branch_out,jump_out,zero_out,branch_target_out:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>20</int>
        </entry>
      </elementAttributes>
      <pos x="2260" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>MEM_WB_Pipeline</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,reset,MemToReg_in,RegWrite_in,ReadData_in:32,ALUResult_in:32,Rd_in:5</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity MEM_WB_Pipeline is
    Port (
        clk           : in  std_logic;
        reset         : in  std_logic;
        -- Control signals
        MemToReg_in   : in  std_logic;
        RegWrite_in   : in  std_logic;
        -- Data signals
        ReadData_in   : in  std_logic_vector(31 downto 0);
        ALUResult_in  : in  std_logic_vector(31 downto 0);
        Rd_in         : in  std_logic_vector(4 downto 0);

        -- Outputs to WB stage
        MemToReg_out  : out std_logic;
        RegWrite_out  : out std_logic;
        ALUResult_out : out std_logic_vector(31 downto 0);
        ReadData_out  : out std_logic_vector(31 downto 0);
        Rd_out   : out std_logic_vector(4 downto 0)
    );
end MEM_WB_Pipeline;

architecture Behavioral of MEM_WB_Pipeline is
begin
    process(clk, reset)
    begin
        if reset = &apos;1&apos; then
            RegWrite_out  &lt;= &apos;0&apos;;
            MemToReg_out  &lt;= &apos;0&apos;;
            ReadData_out  &lt;= (others =&gt; &apos;0&apos;);
            ALUResult_out &lt;= (others =&gt; &apos;0&apos;);
            Rd_out   &lt;= (others =&gt; &apos;0&apos;);
        elsif rising_edge(clk) then
            RegWrite_out  &lt;= RegWrite_in;
            MemToReg_out  &lt;= MemToReg_in;
            ReadData_out  &lt;= ReadData_in;
            ALUResult_out &lt;= ALUResult_in;
            Rd_out   &lt;= Rd_in;
        end if;
    end process;
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>MemToReg_out,RegWrite_out,ALUResult_out:32,ReadData_out:32,Rd_out:5</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="3360" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="2740" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="2880" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="3840" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="3720" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="3760" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="3800" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="3840" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="3880" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="3740" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>EEPROMDualPort</elementName>
      <elementAttributes>
        <entry>
          <string>AddrBits</string>
          <int>24</int>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="3100" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>addr_trunc32to24</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>addr_32:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity addr_trunc32to24 is
    Port (
        addr_32 : in  STD_LOGIC_VECTOR(31 downto 0);
        addr_24 : out STD_LOGIC_VECTOR(23 downto 0)
    );
end addr_trunc32to24;

architecture Behavioral of addr_trunc32to24 is
begin
    -- Pass lower 24 bits
    addr_24 &lt;= addr_32(23 downto 0);
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>addr_24:24</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>9</int>
        </entry>
      </elementAttributes>
      <pos x="2740" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="2700" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>24</int>
        </entry>
      </elementAttributes>
      <pos x="2960" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="2920" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes/>
      <pos x="-680" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes/>
      <pos x="-680" y="-140"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Estágio IF</string>
        </entry>
      </elementAttributes>
      <pos x="-640" y="60"/>
    </visualElement>
    <visualElement>
      <elementName>ROM</elementName>
      <elementAttributes>
        <entry>
          <string>AddrBits</string>
          <int>24</int>
        </entry>
        <entry>
          <string>Label</string>
          <string>inst memory</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>Data</string>
          <data>108093,108093,6*0,2000ef</data>
        </entry>
      </elementAttributes>
      <pos x="-500" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>VDD</elementName>
      <elementAttributes/>
      <pos x="-520" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>IFID</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>pc_i:32,inst_i:32,clk,reset,freeze,bubble</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>-- Registrador que guarda os dados necessários entre IF e ID. Esses dados são o valor de PC e a instrução da vez
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity IFID is
	Port (
    	pc_i : in std_logic_vector(31 downto 0);
        inst_i: in std_logic_vector(31 downto 0);

    	clk: in std_logic;
        reset: in std_logic;

		freeze: in std_logic;
		bubble: in std_logic;

        pc_o: out std_logic_vector(31 downto 0);
        inst_o: out std_logic_vector(31 downto 0)
    	);
end IFID;

architecture Behavioral of IFID is

begin

process(clk, reset)
begin
	if reset = &apos;1&apos; then
        pc_o &lt;= X&quot;00000000&quot;;
        inst_o &lt;= X&quot;00000000&quot;;

	elsif rising_edge(clk) then

		if freeze = &apos;0&apos; then
			if bubble = &apos;1&apos; then
				pc_o &lt;= X&quot;00000000&quot;;
				inst_o &lt;= X&quot;00000000&quot;;
			else
				pc_o &lt;= pc_i;
				inst_o &lt;= inst_i;
			end if;
		end if;

	end if;
end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>pc_o:32,inst_o:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="-340" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Saída PC do registrador IF/ID</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>pc_o</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-140" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Saída instruction do registrador IF/ID</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>Instruction Out</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="0" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-380" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Valor atual de PC</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>pc</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-480" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="-680" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-680" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="2880" y="-240"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="-660" y="-140"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="600" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="1180" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="2240" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="3340" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="3080" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="-660" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="600" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="1180" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="2240" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="3340" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>IFIDfreeze</string>
        </entry>
      </elementAttributes>
      <pos x="280" y="-240"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>IFIDbubble</string>
        </entry>
      </elementAttributes>
      <pos x="280" y="-220"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>IDEXbubble</string>
        </entry>
      </elementAttributes>
      <pos x="280" y="-200"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>EXMEMbubble</string>
        </entry>
      </elementAttributes>
      <pos x="280" y="-180"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>IFIDfreeze</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>IFIDbubble</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>IDEXbubble</string>
        </entry>
      </elementAttributes>
      <pos x="1180" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>EXMEMbubble</string>
        </entry>
      </elementAttributes>
      <pos x="2240" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>novoblocoIF.dig</elementName>
      <elementAttributes/>
      <pos x="-680" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>pc</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>pc_i:32,clk,reset,freeze</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>-- Registrador de 32 bits com entradas PCin, clk, reset e saída PCout

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity pc is
	Port (
    	pc_i : in std_logic_vector(31 downto 0);
    	clk: in std_logic;
        reset: in std_logic;

		freeze: in std_logic;

        pc_o: out std_logic_vector(31 downto 0)
    	);
end pc;

architecture Behavioral of pc is

begin

process(clk, reset)
begin
	if reset = &apos;1&apos; then
		pc_o &lt;= X&quot;00000000&quot;;

	elsif rising_edge(clk) and freeze = &apos;0&apos; then

		pc_o &lt;= pc_i;

	end if;
end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>pc_o:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="-660" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="-680" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="-680" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>PCfreeze</string>
        </entry>
      </elementAttributes>
      <pos x="280" y="-260"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>PCfreeze</string>
        </entry>
      </elementAttributes>
      <pos x="-680" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>jump</string>
        </entry>
      </elementAttributes>
      <pos x="2900" y="-420"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>jump</string>
        </entry>
      </elementAttributes>
      <pos x="-700" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>branch-target</string>
        </entry>
      </elementAttributes>
      <pos x="2700" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>branch-target</string>
        </entry>
      </elementAttributes>
      <pos x="-720" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>HDU</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>rs1:5,rs2:5,opcode:7,rd_IDEX:5,RegWrite_IDEX,rd_EXMEM:5,RegWrite_EXMEM,rd_MEMWB:5,RegWrite_MEMWB,jump</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity HDU is
	Port (
        -- Entradas que vêm do estágio ID
        rs1: in std_logic_vector(4 downto 0);
        rs2: in std_logic_vector(4 downto 0);
        opcode: in std_logic_vector(6 downto 0);

        -- Entradas que vêm dos demais estágios
        rd_IDEX: in std_logic_vector(4 downto 0);
        RegWrite_IDEX: in std_logic;

        rd_EXMEM: in std_logic_vector(4 downto 0);
        RegWrite_EXMEM: in std_logic;

        rd_MEMWB: in std_logic_vector(4 downto 0);
        RegWrite_MEMWB: in std_logic;

        jump: in std_logic; -- Indica se será feito um salto este ciclo

    	-- Saídas
        -- Saídas freeze
        -- Se uma delas é &apos;1&apos;, o registrador em questão mantém seu valor atual no próximo ciclo
        PC_freeze: out std_logic;
        IFID_freeze: out std_logic;

        -- Saídas bubble
        -- Se uma delas é &apos;1&apos;, o registrador em questão recebe um NOP no próximo ciclo. Seu valor atual pode continuar se propagando ao longo da pipeline (pois o NOP é inserido de forma síncrona)
        IFID_bubble: out std_logic;
        IDEX_bubble: out std_logic;
        EXMEM_bubble: out std_logic
    	);
end HDU;

architecture Behavioral of HDU is

    -- Opcodes para diferentes tipos de instrução
    constant R_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0110011&quot;; -- OP (ADD, SUB, AND, OR, XOR)
    constant I_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0010011&quot;; -- OP-IMM (ADDI, ANDI, ORI)
    constant L_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0000011&quot;; -- LOAD (LW)
    constant S_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0100011&quot;; -- STORE (SW)
    constant B_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;1100011&quot;; -- BRANCH (BEQ, BNE)
    constant JAL_OP      : std_logic_vector(6 downto 0) := &quot;1101111&quot;; -- JAL
    constant JALR_OP     : std_logic_vector(6 downto 0) := &quot;1100111&quot;; -- JALR
    constant LUI_OP      : std_logic_vector(6 downto 0) := &quot;0110111&quot;; -- LUI
    constant AUIPC_OP    : std_logic_vector(6 downto 0) := &quot;0010111&quot;; -- AUIPC

begin

process(rs1, rs2, opcode, rd_IDEX, RegWrite_IDEX, rd_EXMEM, RegWrite_EXMEM, rd_MEMWB, RegWrite_MEMWB, jump)

    variable inst_type: integer;

    -- inst_type = 1 indica que a instrução é jal, jalr, auipc, lui, ou seja, não está sujeita a hazard de escrita-leitura
    -- inst_type = 2 indica que a instrução é addi, andi, ori, xori, lli, srli, lw, sw, ou seja, está sujeita a hazard de escrita-leitura apenas em rs1
    -- inst_type = 3 indica que a instrução e add, sub, and, or, xor, sll, srl, beq, bne, ou seja, está sujeita a hazard de escrita-leitura em rs1 e rs2

    variable WriteReadHazard: std_logic; -- Indica que há um hazard de escrita-leitura

begin
    -- Primeiro, vamos verificar se há um jump acontecendo. Nesse caso, independentemente dos demais hazards, as instruções em IFID, IDEX estão erradas, e o valor de PC também está errado (está prestes a ser atualizado)
    -- Precisamos dar bubble em IFID, IDEX, EXMEM, e não congelar PC
    if jump = &apos;1&apos; then
        PC_freeze &lt;= &apos;0&apos;;
        IFID_freeze &lt;= &apos;0&apos;;

        IFID_bubble &lt;= &apos;1&apos;;
        IDEX_bubble &lt;= &apos;1&apos;;
        EXMEM_bubble &lt;= &apos;1&apos;;
    else

        -- Identificar se a instução em ID é tipo 1, 2, ou 3
        case opcode is
            when JAL_OP | JALR_OP | LUI_OP | AUIPC_OP =&gt;
                inst_type := 1;
            when I_TYPE_OP | L_TYPE_OP | S_TYPE_OP =&gt;
                inst_type := 2;
            when R_TYPE_OP | B_TYPE_OP =&gt;
                inst_type := 3;
            when others =&gt;
                -- No caso de instrução inválida, vou considerar como tipo 1 (não suscetível a hazard de escrita-leitura)
                inst_type := 1;
        end case;

        -- Identificar com base nisso se há hazard de escrita-leitura
        case inst_type is            
            when 2 =&gt;
                if RegWrite_IDEX = &apos;1&apos; and rd_IDEX = rs1 then
                    writeReadHazard := &apos;1&apos;;

                elsif RegWrite_EXMEM = &apos;1&apos; and rd_EXMEM = rs1 then
                    writeReadHazard := &apos;1&apos;;
                
                elsif RegWrite_MEMWB = &apos;1&apos; and rd_MEMWB = rs1 then
                    writeReadHazard := &apos;1&apos;;
                
                else
                    writeReadHazard := &apos;0&apos;;
                
                end if;

            when 3 =&gt;
                if RegWrite_IDEX = &apos;1&apos; and (rd_IDEX = rs1 or rd_IDEX = rs2) then
                    writeReadHazard := &apos;1&apos;;

                elsif RegWrite_EXMEM = &apos;1&apos; and (rd_EXMEM = rs1 or rd_EXMEM = rs2) then
                    writeReadHazard := &apos;1&apos;;

                elsif RegWrite_MEMWB = &apos;1&apos; and (rd_MEMWB = rs1 or rd_MEMWB = rs2) then
                    writeReadHazard := &apos;1&apos;;

                else
                    writeReadHazard := &apos;0&apos;;

                end if;

            when others =&gt;
                -- No tipo 1, não temos hazard de escrita-leitura
                writeReadHazard := &apos;0&apos;;
        end case;

        -- De acordo com writeReadHazard, decidimos as saídas
        if writeReadHazard = &apos;1&apos; then
            -- Nesse caso, o valor que estamos lendo em ID está errado. Precisamos inserir bolha em IDEX para esse valor não se propagar, e congelar PC e IFID
            PC_freeze &lt;= &apos;1&apos;;
            IFID_freeze &lt;= &apos;1&apos;;

            IFID_bubble &lt;= &apos;0&apos;;
            IDEX_bubble &lt;= &apos;1&apos;;
            EXMEM_bubble &lt;= &apos;0&apos;;
        else
            -- Sem hazard
            PC_freeze &lt;= &apos;0&apos;;
            IFID_freeze &lt;= &apos;0&apos;;

            IFID_bubble &lt;= &apos;0&apos;;
            IDEX_bubble &lt;= &apos;0&apos;;
            EXMEM_bubble &lt;= &apos;0&apos;;
        end if;

    end if;

end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>PC_freeze,IFID_freeze,IFID_bubble,IDEX_bubble,EXMEM_bubble</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>16</int>
        </entry>
      </elementAttributes>
      <pos x="-60" y="-260"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>jump</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-80"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>hdu-rs2</string>
        </entry>
      </elementAttributes>
      <pos x="420" y="740"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>hdu-rs1</string>
        </entry>
      </elementAttributes>
      <pos x="420" y="700"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>hdu-rs2</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-240"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>hdu-rs1</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-260"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>hdu-opcode</string>
        </entry>
      </elementAttributes>
      <pos x="360" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>hdu-opcode</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-220"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>rd_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="1580" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-200"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>RegWrite_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="1580" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>RegWrite_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-180"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_EXMEM</string>
        </entry>
      </elementAttributes>
      <pos x="3140" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>RegWrite_EXMEM</string>
        </entry>
      </elementAttributes>
      <pos x="3180" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>RegWrite_EXMEM</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-140"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_EXMEM</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-160"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_MEMWB</string>
        </entry>
      </elementAttributes>
      <pos x="3680" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>RegWrite_MEMWB</string>
        </entry>
      </elementAttributes>
      <pos x="3640" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>RegWrite_MEMWB</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-100"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_MEMWB</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-120"/>
    </visualElement>
    <visualElement>
      <elementName>alu_vhdl.dig</elementName>
      <elementAttributes>
        <entry>
          <string>shapeType</string>
          <shapeType>CUSTOM</shapeType>
        </entry>
      </elementAttributes>
      <pos x="1880" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>Alu_control.dig</elementName>
      <elementAttributes/>
      <pos x="1740" y="620"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1760" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="1860" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="1640" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>adder.dig</elementName>
      <elementAttributes/>
      <pos x="1980" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>BarrelShifter</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1880" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="1860" y="600"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="-760" y="640"/>
      <p2 x="-520" y="640"/>
    </wire>
    <wire>
      <p1 x="480" y="640"/>
      <p2 x="1180" y="640"/>
    </wire>
    <wire>
      <p1 x="1700" y="640"/>
      <p2 x="1740" y="640"/>
    </wire>
    <wire>
      <p1 x="1800" y="640"/>
      <p2 x="1840" y="640"/>
    </wire>
    <wire>
      <p1 x="260" y="-260"/>
      <p2 x="280" y="-260"/>
    </wire>
    <wire>
      <p1 x="-80" y="-260"/>
      <p2 x="-60" y="-260"/>
    </wire>
    <wire>
      <p1 x="940" y="260"/>
      <p2 x="1020" y="260"/>
    </wire>
    <wire>
      <p1 x="3000" y="260"/>
      <p2 x="3360" y="260"/>
    </wire>
    <wire>
      <p1 x="2660" y="260"/>
      <p2 x="2980" y="260"/>
    </wire>
    <wire>
      <p1 x="1500" y="260"/>
      <p2 x="1540" y="260"/>
    </wire>
    <wire>
      <p1 x="1020" y="260"/>
      <p2 x="1200" y="260"/>
    </wire>
    <wire>
      <p1 x="1540" y="260"/>
      <p2 x="2260" y="260"/>
    </wire>
    <wire>
      <p1 x="3060" y="520"/>
      <p2 x="3100" y="520"/>
    </wire>
    <wire>
      <p1 x="-680" y="520"/>
      <p2 x="-660" y="520"/>
    </wire>
    <wire>
      <p1 x="1540" y="520"/>
      <p2 x="1580" y="520"/>
    </wire>
    <wire>
      <p1 x="1180" y="520"/>
      <p2 x="1200" y="520"/>
    </wire>
    <wire>
      <p1 x="1760" y="520"/>
      <p2 x="1960" y="520"/>
    </wire>
    <wire>
      <p1 x="-680" y="-140"/>
      <p2 x="-660" y="-140"/>
    </wire>
    <wire>
      <p1 x="-80" y="-140"/>
      <p2 x="-60" y="-140"/>
    </wire>
    <wire>
      <p1 x="740" y="140"/>
      <p2 x="1000" y="140"/>
    </wire>
    <wire>
      <p1 x="340" y="400"/>
      <p2 x="360" y="400"/>
    </wire>
    <wire>
      <p1 x="1040" y="400"/>
      <p2 x="1200" y="400"/>
    </wire>
    <wire>
      <p1 x="920" y="400"/>
      <p2 x="960" y="400"/>
    </wire>
    <wire>
      <p1 x="-180" y="400"/>
      <p2 x="0" y="400"/>
    </wire>
    <wire>
      <p1 x="600" y="400"/>
      <p2 x="620" y="400"/>
    </wire>
    <wire>
      <p1 x="-360" y="400"/>
      <p2 x="-340" y="400"/>
    </wire>
    <wire>
      <p1 x="-760" y="400"/>
      <p2 x="-680" y="400"/>
    </wire>
    <wire>
      <p1 x="1940" y="400"/>
      <p2 x="2120" y="400"/>
    </wire>
    <wire>
      <p1 x="2160" y="400"/>
      <p2 x="2260" y="400"/>
    </wire>
    <wire>
      <p1 x="1800" y="400"/>
      <p2 x="1880" y="400"/>
    </wire>
    <wire>
      <p1 x="0" y="400"/>
      <p2 x="40" y="400"/>
    </wire>
    <wire>
      <p1 x="1520" y="1040"/>
      <p2 x="2200" y="1040"/>
    </wire>
    <wire>
      <p1 x="1180" y="660"/>
      <p2 x="1200" y="660"/>
    </wire>
    <wire>
      <p1 x="1660" y="660"/>
      <p2 x="1740" y="660"/>
    </wire>
    <wire>
      <p1 x="940" y="280"/>
      <p2 x="1040" y="280"/>
    </wire>
    <wire>
      <p1 x="2660" y="280"/>
      <p2 x="3140" y="280"/>
    </wire>
    <wire>
      <p1 x="1500" y="280"/>
      <p2 x="2260" y="280"/>
    </wire>
    <wire>
      <p1 x="1040" y="280"/>
      <p2 x="1200" y="280"/>
    </wire>
    <wire>
      <p1 x="3140" y="280"/>
      <p2 x="3360" y="280"/>
    </wire>
    <wire>
      <p1 x="-680" y="540"/>
      <p2 x="-660" y="540"/>
    </wire>
    <wire>
      <p1 x="440" y="540"/>
      <p2 x="580" y="540"/>
    </wire>
    <wire>
      <p1 x="1740" y="540"/>
      <p2 x="1880" y="540"/>
    </wire>
    <wire>
      <p1 x="1960" y="540"/>
      <p2 x="1980" y="540"/>
    </wire>
    <wire>
      <p1 x="-80" y="-160"/>
      <p2 x="-60" y="-160"/>
    </wire>
    <wire>
      <p1 x="700" y="160"/>
      <p2 x="980" y="160"/>
    </wire>
    <wire>
      <p1 x="3660" y="160"/>
      <p2 x="3760" y="160"/>
    </wire>
    <wire>
      <p1 x="2660" y="160"/>
      <p2 x="3060" y="160"/>
    </wire>
    <wire>
      <p1 x="-540" y="160"/>
      <p2 x="-500" y="160"/>
    </wire>
    <wire>
      <p1 x="1180" y="160"/>
      <p2 x="1200" y="160"/>
    </wire>
    <wire>
      <p1 x="2240" y="160"/>
      <p2 x="2260" y="160"/>
    </wire>
    <wire>
      <p1 x="3340" y="160"/>
      <p2 x="3360" y="160"/>
    </wire>
    <wire>
      <p1 x="1500" y="160"/>
      <p2 x="1720" y="160"/>
    </wire>
    <wire>
      <p1 x="2100" y="160"/>
      <p2 x="2200" y="160"/>
    </wire>
    <wire>
      <p1 x="3760" y="160"/>
      <p2 x="3860" y="160"/>
    </wire>
    <wire>
      <p1 x="480" y="420"/>
      <p2 x="620" y="420"/>
    </wire>
    <wire>
      <p1 x="340" y="420"/>
      <p2 x="400" y="420"/>
    </wire>
    <wire>
      <p1 x="1060" y="420"/>
      <p2 x="1200" y="420"/>
    </wire>
    <wire>
      <p1 x="1500" y="420"/>
      <p2 x="1520" y="420"/>
    </wire>
    <wire>
      <p1 x="2240" y="420"/>
      <p2 x="2260" y="420"/>
    </wire>
    <wire>
      <p1 x="1840" y="420"/>
      <p2 x="1880" y="420"/>
    </wire>
    <wire>
      <p1 x="400" y="420"/>
      <p2 x="460" y="420"/>
    </wire>
    <wire>
      <p1 x="-680" y="-40"/>
      <p2 x="-660" y="-40"/>
    </wire>
    <wire>
      <p1 x="0" y="680"/>
      <p2 x="580" y="680"/>
    </wire>
    <wire>
      <p1 x="880" y="680"/>
      <p2 x="920" y="680"/>
    </wire>
    <wire>
      <p1 x="920" y="680"/>
      <p2 x="1040" y="680"/>
    </wire>
    <wire>
      <p1 x="940" y="40"/>
      <p2 x="1100" y="40"/>
    </wire>
    <wire>
      <p1 x="-220" y="300"/>
      <p2 x="-160" y="300"/>
    </wire>
    <wire>
      <p1 x="940" y="300"/>
      <p2 x="1060" y="300"/>
    </wire>
    <wire>
      <p1 x="2660" y="300"/>
      <p2 x="2700" y="300"/>
    </wire>
    <wire>
      <p1 x="1500" y="300"/>
      <p2 x="2260" y="300"/>
    </wire>
    <wire>
      <p1 x="-520" y="300"/>
      <p2 x="-340" y="300"/>
    </wire>
    <wire>
      <p1 x="-160" y="300"/>
      <p2 x="-140" y="300"/>
    </wire>
    <wire>
      <p1 x="1060" y="300"/>
      <p2 x="1200" y="300"/>
    </wire>
    <wire>
      <p1 x="360" y="560"/>
      <p2 x="1060" y="560"/>
    </wire>
    <wire>
      <p1 x="-540" y="560"/>
      <p2 x="-520" y="560"/>
    </wire>
    <wire>
      <p1 x="1520" y="560"/>
      <p2 x="1580" y="560"/>
    </wire>
    <wire>
      <p1 x="2040" y="560"/>
      <p2 x="2160" y="560"/>
    </wire>
    <wire>
      <p1 x="260" y="-180"/>
      <p2 x="280" y="-180"/>
    </wire>
    <wire>
      <p1 x="-80" y="-180"/>
      <p2 x="-60" y="-180"/>
    </wire>
    <wire>
      <p1 x="660" y="180"/>
      <p2 x="960" y="180"/>
    </wire>
    <wire>
      <p1 x="3660" y="180"/>
      <p2 x="3680" y="180"/>
    </wire>
    <wire>
      <p1 x="2660" y="180"/>
      <p2 x="3040" y="180"/>
    </wire>
    <wire>
      <p1 x="-440" y="180"/>
      <p2 x="-420" y="180"/>
    </wire>
    <wire>
      <p1 x="1180" y="180"/>
      <p2 x="1200" y="180"/>
    </wire>
    <wire>
      <p1 x="2240" y="180"/>
      <p2 x="2260" y="180"/>
    </wire>
    <wire>
      <p1 x="3340" y="180"/>
      <p2 x="3360" y="180"/>
    </wire>
    <wire>
      <p1 x="1500" y="180"/>
      <p2 x="1820" y="180"/>
    </wire>
    <wire>
      <p1 x="1080" y="440"/>
      <p2 x="1200" y="440"/>
    </wire>
    <wire>
      <p1 x="2680" y="440"/>
      <p2 x="2700" y="440"/>
    </wire>
    <wire>
      <p1 x="2920" y="440"/>
      <p2 x="2960" y="440"/>
    </wire>
    <wire>
      <p1 x="-520" y="440"/>
      <p2 x="-480" y="440"/>
    </wire>
    <wire>
      <p1 x="560" y="440"/>
      <p2 x="620" y="440"/>
    </wire>
    <wire>
      <p1 x="340" y="440"/>
      <p2 x="420" y="440"/>
    </wire>
    <wire>
      <p1 x="1500" y="440"/>
      <p2 x="1740" y="440"/>
    </wire>
    <wire>
      <p1 x="1800" y="440"/>
      <p2 x="1880" y="440"/>
    </wire>
    <wire>
      <p1 x="2960" y="440"/>
      <p2 x="3100" y="440"/>
    </wire>
    <wire>
      <p1 x="2700" y="440"/>
      <p2 x="2740" y="440"/>
    </wire>
    <wire>
      <p1 x="900" y="60"/>
      <p2 x="1080" y="60"/>
    </wire>
    <wire>
      <p1 x="2920" y="60"/>
      <p2 x="2940" y="60"/>
    </wire>
    <wire>
      <p1 x="2860" y="60"/>
      <p2 x="2880" y="60"/>
    </wire>
    <wire>
      <p1 x="360" y="700"/>
      <p2 x="420" y="700"/>
    </wire>
    <wire>
      <p1 x="940" y="320"/>
      <p2 x="1080" y="320"/>
    </wire>
    <wire>
      <p1 x="3680" y="320"/>
      <p2 x="3740" y="320"/>
    </wire>
    <wire>
      <p1 x="2660" y="320"/>
      <p2 x="2920" y="320"/>
    </wire>
    <wire>
      <p1 x="-220" y="320"/>
      <p2 x="-180" y="320"/>
    </wire>
    <wire>
      <p1 x="-420" y="320"/>
      <p2 x="-340" y="320"/>
    </wire>
    <wire>
      <p1 x="-700" y="320"/>
      <p2 x="-680" y="320"/>
    </wire>
    <wire>
      <p1 x="2160" y="320"/>
      <p2 x="2260" y="320"/>
    </wire>
    <wire>
      <p1 x="1500" y="320"/>
      <p2 x="1840" y="320"/>
    </wire>
    <wire>
      <p1 x="1080" y="320"/>
      <p2 x="1200" y="320"/>
    </wire>
    <wire>
      <p1 x="380" y="580"/>
      <p2 x="1080" y="580"/>
    </wire>
    <wire>
      <p1 x="-680" y="580"/>
      <p2 x="-660" y="580"/>
    </wire>
    <wire>
      <p1 x="1940" y="580"/>
      <p2 x="1980" y="580"/>
    </wire>
    <wire>
      <p1 x="480" y="-200"/>
      <p2 x="3680" y="-200"/>
    </wire>
    <wire>
      <p1 x="260" y="-200"/>
      <p2 x="280" y="-200"/>
    </wire>
    <wire>
      <p1 x="-80" y="-200"/>
      <p2 x="-60" y="-200"/>
    </wire>
    <wire>
      <p1 x="360" y="200"/>
      <p2 x="560" y="200"/>
    </wire>
    <wire>
      <p1 x="940" y="200"/>
      <p2 x="960" y="200"/>
    </wire>
    <wire>
      <p1 x="2660" y="200"/>
      <p2 x="3360" y="200"/>
    </wire>
    <wire>
      <p1 x="3660" y="200"/>
      <p2 x="3800" y="200"/>
    </wire>
    <wire>
      <p1 x="1500" y="200"/>
      <p2 x="2260" y="200"/>
    </wire>
    <wire>
      <p1 x="-520" y="200"/>
      <p2 x="-500" y="200"/>
    </wire>
    <wire>
      <p1 x="-420" y="200"/>
      <p2 x="-380" y="200"/>
    </wire>
    <wire>
      <p1 x="-720" y="200"/>
      <p2 x="-680" y="200"/>
    </wire>
    <wire>
      <p1 x="560" y="200"/>
      <p2 x="640" y="200"/>
    </wire>
    <wire>
      <p1 x="3800" y="200"/>
      <p2 x="3840" y="200"/>
    </wire>
    <wire>
      <p1 x="960" y="200"/>
      <p2 x="1200" y="200"/>
    </wire>
    <wire>
      <p1 x="1100" y="460"/>
      <p2 x="1200" y="460"/>
    </wire>
    <wire>
      <p1 x="2980" y="460"/>
      <p2 x="3100" y="460"/>
    </wire>
    <wire>
      <p1 x="-680" y="460"/>
      <p2 x="-540" y="460"/>
    </wire>
    <wire>
      <p1 x="340" y="460"/>
      <p2 x="360" y="460"/>
    </wire>
    <wire>
      <p1 x="580" y="460"/>
      <p2 x="620" y="460"/>
    </wire>
    <wire>
      <p1 x="1500" y="460"/>
      <p2 x="1700" y="460"/>
    </wire>
    <wire>
      <p1 x="1840" y="460"/>
      <p2 x="1880" y="460"/>
    </wire>
    <wire>
      <p1 x="1780" y="460"/>
      <p2 x="1820" y="460"/>
    </wire>
    <wire>
      <p1 x="360" y="460"/>
      <p2 x="560" y="460"/>
    </wire>
    <wire>
      <p1 x="-80" y="-80"/>
      <p2 x="-60" y="-80"/>
    </wire>
    <wire>
      <p1 x="860" y="80"/>
      <p2 x="1060" y="80"/>
    </wire>
    <wire>
      <p1 x="2700" y="80"/>
      <p2 x="2740" y="80"/>
    </wire>
    <wire>
      <p1 x="3640" y="80"/>
      <p2 x="3680" y="80"/>
    </wire>
    <wire>
      <p1 x="940" y="340"/>
      <p2 x="1100" y="340"/>
    </wire>
    <wire>
      <p1 x="2660" y="340"/>
      <p2 x="2720" y="340"/>
    </wire>
    <wire>
      <p1 x="-360" y="340"/>
      <p2 x="-340" y="340"/>
    </wire>
    <wire>
      <p1 x="2120" y="340"/>
      <p2 x="2180" y="340"/>
    </wire>
    <wire>
      <p1 x="1500" y="340"/>
      <p2 x="1760" y="340"/>
    </wire>
    <wire>
      <p1 x="2200" y="340"/>
      <p2 x="2260" y="340"/>
    </wire>
    <wire>
      <p1 x="1100" y="340"/>
      <p2 x="1200" y="340"/>
    </wire>
    <wire>
      <p1 x="400" y="600"/>
      <p2 x="1100" y="600"/>
    </wire>
    <wire>
      <p1 x="-680" y="600"/>
      <p2 x="-660" y="600"/>
    </wire>
    <wire>
      <p1 x="1860" y="600"/>
      <p2 x="1880" y="600"/>
    </wire>
    <wire>
      <p1 x="2860" y="-220"/>
      <p2 x="2880" y="-220"/>
    </wire>
    <wire>
      <p1 x="2920" y="-220"/>
      <p2 x="2940" y="-220"/>
    </wire>
    <wire>
      <p1 x="260" y="-220"/>
      <p2 x="280" y="-220"/>
    </wire>
    <wire>
      <p1 x="-80" y="-220"/>
      <p2 x="-60" y="-220"/>
    </wire>
    <wire>
      <p1 x="940" y="220"/>
      <p2 x="980" y="220"/>
    </wire>
    <wire>
      <p1 x="2660" y="220"/>
      <p2 x="3180" y="220"/>
    </wire>
    <wire>
      <p1 x="3660" y="220"/>
      <p2 x="3740" y="220"/>
    </wire>
    <wire>
      <p1 x="3880" y="220"/>
      <p2 x="3900" y="220"/>
    </wire>
    <wire>
      <p1 x="1500" y="220"/>
      <p2 x="2260" y="220"/>
    </wire>
    <wire>
      <p1 x="980" y="220"/>
      <p2 x="1200" y="220"/>
    </wire>
    <wire>
      <p1 x="3180" y="220"/>
      <p2 x="3360" y="220"/>
    </wire>
    <wire>
      <p1 x="-160" y="860"/>
      <p2 x="1120" y="860"/>
    </wire>
    <wire>
      <p1 x="460" y="480"/>
      <p2 x="620" y="480"/>
    </wire>
    <wire>
      <p1 x="3160" y="480"/>
      <p2 x="3240" y="480"/>
    </wire>
    <wire>
      <p1 x="3040" y="480"/>
      <p2 x="3100" y="480"/>
    </wire>
    <wire>
      <p1 x="1120" y="480"/>
      <p2 x="1200" y="480"/>
    </wire>
    <wire>
      <p1 x="340" y="480"/>
      <p2 x="380" y="480"/>
    </wire>
    <wire>
      <p1 x="1500" y="480"/>
      <p2 x="1660" y="480"/>
    </wire>
    <wire>
      <p1 x="1680" y="480"/>
      <p2 x="1760" y="480"/>
    </wire>
    <wire>
      <p1 x="380" y="480"/>
      <p2 x="440" y="480"/>
    </wire>
    <wire>
      <p1 x="-80" y="-100"/>
      <p2 x="-60" y="-100"/>
    </wire>
    <wire>
      <p1 x="820" y="100"/>
      <p2 x="1040" y="100"/>
    </wire>
    <wire>
      <p1 x="3680" y="100"/>
      <p2 x="3720" y="100"/>
    </wire>
    <wire>
      <p1 x="3820" y="100"/>
      <p2 x="3840" y="100"/>
    </wire>
    <wire>
      <p1 x="3880" y="100"/>
      <p2 x="3900" y="100"/>
    </wire>
    <wire>
      <p1 x="2820" y="100"/>
      <p2 x="2880" y="100"/>
    </wire>
    <wire>
      <p1 x="380" y="740"/>
      <p2 x="420" y="740"/>
    </wire>
    <wire>
      <p1 x="940" y="360"/>
      <p2 x="1200" y="360"/>
    </wire>
    <wire>
      <p1 x="2200" y="360"/>
      <p2 x="2260" y="360"/>
    </wire>
    <wire>
      <p1 x="-360" y="360"/>
      <p2 x="-340" y="360"/>
    </wire>
    <wire>
      <p1 x="-560" y="360"/>
      <p2 x="-540" y="360"/>
    </wire>
    <wire>
      <p1 x="-700" y="360"/>
      <p2 x="-680" y="360"/>
    </wire>
    <wire>
      <p1 x="2660" y="360"/>
      <p2 x="2700" y="360"/>
    </wire>
    <wire>
      <p1 x="1500" y="360"/>
      <p2 x="1680" y="360"/>
    </wire>
    <wire>
      <p1 x="1760" y="360"/>
      <p2 x="2100" y="360"/>
    </wire>
    <wire>
      <p1 x="420" y="620"/>
      <p2 x="1160" y="620"/>
    </wire>
    <wire>
      <p1 x="1720" y="620"/>
      <p2 x="1740" y="620"/>
    </wire>
    <wire>
      <p1 x="260" y="-240"/>
      <p2 x="280" y="-240"/>
    </wire>
    <wire>
      <p1 x="-80" y="-240"/>
      <p2 x="-60" y="-240"/>
    </wire>
    <wire>
      <p1 x="940" y="240"/>
      <p2 x="1000" y="240"/>
    </wire>
    <wire>
      <p1 x="2660" y="240"/>
      <p2 x="2680" y="240"/>
    </wire>
    <wire>
      <p1 x="3740" y="240"/>
      <p2 x="3820" y="240"/>
    </wire>
    <wire>
      <p1 x="3660" y="240"/>
      <p2 x="3680" y="240"/>
    </wire>
    <wire>
      <p1 x="3240" y="240"/>
      <p2 x="3360" y="240"/>
    </wire>
    <wire>
      <p1 x="1500" y="240"/>
      <p2 x="2260" y="240"/>
    </wire>
    <wire>
      <p1 x="1000" y="240"/>
      <p2 x="1200" y="240"/>
    </wire>
    <wire>
      <p1 x="2680" y="240"/>
      <p2 x="3000" y="240"/>
    </wire>
    <wire>
      <p1 x="3820" y="240"/>
      <p2 x="3840" y="240"/>
    </wire>
    <wire>
      <p1 x="520" y="500"/>
      <p2 x="620" y="500"/>
    </wire>
    <wire>
      <p1 x="3080" y="500"/>
      <p2 x="3100" y="500"/>
    </wire>
    <wire>
      <p1 x="1160" y="500"/>
      <p2 x="1200" y="500"/>
    </wire>
    <wire>
      <p1 x="340" y="500"/>
      <p2 x="480" y="500"/>
    </wire>
    <wire>
      <p1 x="-80" y="-120"/>
      <p2 x="-60" y="-120"/>
    </wire>
    <wire>
      <p1 x="2720" y="120"/>
      <p2 x="2740" y="120"/>
    </wire>
    <wire>
      <p1 x="780" y="120"/>
      <p2 x="1020" y="120"/>
    </wire>
    <wire>
      <p1 x="920" y="380"/>
      <p2 x="940" y="380"/>
    </wire>
    <wire>
      <p1 x="960" y="380"/>
      <p2 x="1200" y="380"/>
    </wire>
    <wire>
      <p1 x="600" y="380"/>
      <p2 x="620" y="380"/>
    </wire>
    <wire>
      <p1 x="-360" y="380"/>
      <p2 x="-340" y="380"/>
    </wire>
    <wire>
      <p1 x="-560" y="380"/>
      <p2 x="-540" y="380"/>
    </wire>
    <wire>
      <p1 x="-720" y="380"/>
      <p2 x="-680" y="380"/>
    </wire>
    <wire>
      <p1 x="1940" y="380"/>
      <p2 x="2160" y="380"/>
    </wire>
    <wire>
      <p1 x="2180" y="380"/>
      <p2 x="2260" y="380"/>
    </wire>
    <wire>
      <p1 x="1860" y="380"/>
      <p2 x="1880" y="380"/>
    </wire>
    <wire>
      <p1 x="1640" y="380"/>
      <p2 x="1800" y="380"/>
    </wire>
    <wire>
      <p1 x="520" y="1020"/>
      <p2 x="3900" y="1020"/>
    </wire>
    <wire>
      <p1 x="0" y="360"/>
      <p2 x="0" y="400"/>
    </wire>
    <wire>
      <p1 x="0" y="400"/>
      <p2 x="0" y="680"/>
    </wire>
    <wire>
      <p1 x="3840" y="80"/>
      <p2 x="3840" y="100"/>
    </wire>
    <wire>
      <p1 x="900" y="20"/>
      <p2 x="900" y="60"/>
    </wire>
    <wire>
      <p1 x="1540" y="260"/>
      <p2 x="1540" y="520"/>
    </wire>
    <wire>
      <p1 x="2180" y="340"/>
      <p2 x="2180" y="380"/>
    </wire>
    <wire>
      <p1 x="-520" y="200"/>
      <p2 x="-520" y="240"/>
    </wire>
    <wire>
      <p1 x="-520" y="300"/>
      <p2 x="-520" y="440"/>
    </wire>
    <wire>
      <p1 x="-520" y="560"/>
      <p2 x="-520" y="640"/>
    </wire>
    <wire>
      <p1 x="-520" y="440"/>
      <p2 x="-520" y="560"/>
    </wire>
    <wire>
      <p1 x="520" y="500"/>
      <p2 x="520" y="1020"/>
    </wire>
    <wire>
      <p1 x="3720" y="80"/>
      <p2 x="3720" y="100"/>
    </wire>
    <wire>
      <p1 x="1160" y="500"/>
      <p2 x="1160" y="620"/>
    </wire>
    <wire>
      <p1 x="1800" y="420"/>
      <p2 x="1800" y="440"/>
    </wire>
    <wire>
      <p1 x="1800" y="380"/>
      <p2 x="1800" y="400"/>
    </wire>
    <wire>
      <p1 x="780" y="20"/>
      <p2 x="780" y="120"/>
    </wire>
    <wire>
      <p1 x="2700" y="440"/>
      <p2 x="2700" y="480"/>
    </wire>
    <wire>
      <p1 x="2700" y="80"/>
      <p2 x="2700" y="300"/>
    </wire>
    <wire>
      <p1 x="400" y="420"/>
      <p2 x="400" y="600"/>
    </wire>
    <wire>
      <p1 x="400" y="600"/>
      <p2 x="400" y="800"/>
    </wire>
    <wire>
      <p1 x="1040" y="400"/>
      <p2 x="1040" y="680"/>
    </wire>
    <wire>
      <p1 x="1040" y="100"/>
      <p2 x="1040" y="280"/>
    </wire>
    <wire>
      <p1 x="2960" y="440"/>
      <p2 x="2960" y="480"/>
    </wire>
    <wire>
      <p1 x="1680" y="360"/>
      <p2 x="1680" y="480"/>
    </wire>
    <wire>
      <p1 x="660" y="20"/>
      <p2 x="660" y="180"/>
    </wire>
    <wire>
      <p1 x="3860" y="160"/>
      <p2 x="3860" y="200"/>
    </wire>
    <wire>
      <p1 x="2200" y="360"/>
      <p2 x="2200" y="1040"/>
    </wire>
    <wire>
      <p1 x="2200" y="160"/>
      <p2 x="2200" y="340"/>
    </wire>
    <wire>
      <p1 x="920" y="680"/>
      <p2 x="920" y="800"/>
    </wire>
    <wire>
      <p1 x="-540" y="160"/>
      <p2 x="-540" y="360"/>
    </wire>
    <wire>
      <p1 x="-540" y="380"/>
      <p2 x="-540" y="460"/>
    </wire>
    <wire>
      <p1 x="3740" y="220"/>
      <p2 x="3740" y="240"/>
    </wire>
    <wire>
      <p1 x="1180" y="520"/>
      <p2 x="1180" y="640"/>
    </wire>
    <wire>
      <p1 x="1820" y="180"/>
      <p2 x="1820" y="460"/>
    </wire>
    <wire>
      <p1 x="-160" y="300"/>
      <p2 x="-160" y="860"/>
    </wire>
    <wire>
      <p1 x="2720" y="120"/>
      <p2 x="2720" y="340"/>
    </wire>
    <wire>
      <p1 x="-420" y="180"/>
      <p2 x="-420" y="200"/>
    </wire>
    <wire>
      <p1 x="-420" y="200"/>
      <p2 x="-420" y="320"/>
    </wire>
    <wire>
      <p1 x="1060" y="420"/>
      <p2 x="1060" y="560"/>
    </wire>
    <wire>
      <p1 x="1060" y="80"/>
      <p2 x="1060" y="300"/>
    </wire>
    <wire>
      <p1 x="2980" y="260"/>
      <p2 x="2980" y="460"/>
    </wire>
    <wire>
      <p1 x="420" y="440"/>
      <p2 x="420" y="620"/>
    </wire>
    <wire>
      <p1 x="1700" y="460"/>
      <p2 x="1700" y="640"/>
    </wire>
    <wire>
      <p1 x="-680" y="460"/>
      <p2 x="-680" y="520"/>
    </wire>
    <wire>
      <p1 x="3880" y="80"/>
      <p2 x="3880" y="100"/>
    </wire>
    <wire>
      <p1 x="3240" y="240"/>
      <p2 x="3240" y="480"/>
    </wire>
    <wire>
      <p1 x="1960" y="520"/>
      <p2 x="1960" y="540"/>
    </wire>
    <wire>
      <p1 x="940" y="360"/>
      <p2 x="940" y="380"/>
    </wire>
    <wire>
      <p1 x="940" y="20"/>
      <p2 x="940" y="40"/>
    </wire>
    <wire>
      <p1 x="2860" y="-220"/>
      <p2 x="2860" y="60"/>
    </wire>
    <wire>
      <p1 x="560" y="180"/>
      <p2 x="560" y="200"/>
    </wire>
    <wire>
      <p1 x="560" y="440"/>
      <p2 x="560" y="460"/>
    </wire>
    <wire>
      <p1 x="3760" y="80"/>
      <p2 x="3760" y="160"/>
    </wire>
    <wire>
      <p1 x="1200" y="540"/>
      <p2 x="1200" y="660"/>
    </wire>
    <wire>
      <p1 x="1840" y="460"/>
      <p2 x="1840" y="640"/>
    </wire>
    <wire>
      <p1 x="1840" y="320"/>
      <p2 x="1840" y="420"/>
    </wire>
    <wire>
      <p1 x="-180" y="320"/>
      <p2 x="-180" y="400"/>
    </wire>
    <wire>
      <p1 x="820" y="20"/>
      <p2 x="820" y="100"/>
    </wire>
    <wire>
      <p1 x="2100" y="160"/>
      <p2 x="2100" y="360"/>
    </wire>
    <wire>
      <p1 x="1080" y="440"/>
      <p2 x="1080" y="580"/>
    </wire>
    <wire>
      <p1 x="1080" y="60"/>
      <p2 x="1080" y="320"/>
    </wire>
    <wire>
      <p1 x="3000" y="240"/>
      <p2 x="3000" y="260"/>
    </wire>
    <wire>
      <p1 x="440" y="480"/>
      <p2 x="440" y="540"/>
    </wire>
    <wire>
      <p1 x="1720" y="160"/>
      <p2 x="1720" y="620"/>
    </wire>
    <wire>
      <p1 x="-700" y="300"/>
      <p2 x="-700" y="320"/>
    </wire>
    <wire>
      <p1 x="-700" y="320"/>
      <p2 x="-700" y="360"/>
    </wire>
    <wire>
      <p1 x="700" y="20"/>
      <p2 x="700" y="160"/>
    </wire>
    <wire>
      <p1 x="3900" y="100"/>
      <p2 x="3900" y="220"/>
    </wire>
    <wire>
      <p1 x="3900" y="220"/>
      <p2 x="3900" y="1020"/>
    </wire>
    <wire>
      <p1 x="960" y="380"/>
      <p2 x="960" y="400"/>
    </wire>
    <wire>
      <p1 x="960" y="180"/>
      <p2 x="960" y="200"/>
    </wire>
    <wire>
      <p1 x="2880" y="40"/>
      <p2 x="2880" y="60"/>
    </wire>
    <wire>
      <p1 x="2880" y="-240"/>
      <p2 x="2880" y="-220"/>
    </wire>
    <wire>
      <p1 x="2880" y="60"/>
      <p2 x="2880" y="100"/>
    </wire>
    <wire>
      <p1 x="3140" y="100"/>
      <p2 x="3140" y="280"/>
    </wire>
    <wire>
      <p1 x="580" y="460"/>
      <p2 x="580" y="540"/>
    </wire>
    <wire>
      <p1 x="1860" y="380"/>
      <p2 x="1860" y="500"/>
    </wire>
    <wire>
      <p1 x="2120" y="340"/>
      <p2 x="2120" y="400"/>
    </wire>
    <wire>
      <p1 x="460" y="420"/>
      <p2 x="460" y="480"/>
    </wire>
    <wire>
      <p1 x="1100" y="460"/>
      <p2 x="1100" y="600"/>
    </wire>
    <wire>
      <p1 x="1100" y="40"/>
      <p2 x="1100" y="340"/>
    </wire>
    <wire>
      <p1 x="1740" y="440"/>
      <p2 x="1740" y="540"/>
    </wire>
    <wire>
      <p1 x="-720" y="200"/>
      <p2 x="-720" y="380"/>
    </wire>
    <wire>
      <p1 x="980" y="160"/>
      <p2 x="980" y="220"/>
    </wire>
    <wire>
      <p1 x="2900" y="-420"/>
      <p2 x="2900" y="-320"/>
    </wire>
    <wire>
      <p1 x="3800" y="80"/>
      <p2 x="3800" y="200"/>
    </wire>
    <wire>
      <p1 x="1880" y="540"/>
      <p2 x="1880" y="560"/>
    </wire>
    <wire>
      <p1 x="860" y="20"/>
      <p2 x="860" y="80"/>
    </wire>
    <wire>
      <p1 x="-480" y="440"/>
      <p2 x="-480" y="460"/>
    </wire>
    <wire>
      <p1 x="480" y="-200"/>
      <p2 x="480" y="420"/>
    </wire>
    <wire>
      <p1 x="480" y="500"/>
      <p2 x="480" y="640"/>
    </wire>
    <wire>
      <p1 x="3680" y="240"/>
      <p2 x="3680" y="320"/>
    </wire>
    <wire>
      <p1 x="3680" y="-200"/>
      <p2 x="3680" y="80"/>
    </wire>
    <wire>
      <p1 x="3680" y="80"/>
      <p2 x="3680" y="100"/>
    </wire>
    <wire>
      <p1 x="3680" y="100"/>
      <p2 x="3680" y="180"/>
    </wire>
    <wire>
      <p1 x="3040" y="180"/>
      <p2 x="3040" y="480"/>
    </wire>
    <wire>
      <p1 x="1120" y="480"/>
      <p2 x="1120" y="860"/>
    </wire>
    <wire>
      <p1 x="1760" y="440"/>
      <p2 x="1760" y="480"/>
    </wire>
    <wire>
      <p1 x="1760" y="340"/>
      <p2 x="1760" y="360"/>
    </wire>
    <wire>
      <p1 x="1760" y="360"/>
      <p2 x="1760" y="400"/>
    </wire>
    <wire>
      <p1 x="1760" y="480"/>
      <p2 x="1760" y="520"/>
    </wire>
    <wire>
      <p1 x="740" y="20"/>
      <p2 x="740" y="140"/>
    </wire>
    <wire>
      <p1 x="360" y="200"/>
      <p2 x="360" y="400"/>
    </wire>
    <wire>
      <p1 x="360" y="460"/>
      <p2 x="360" y="560"/>
    </wire>
    <wire>
      <p1 x="360" y="560"/>
      <p2 x="360" y="700"/>
    </wire>
    <wire>
      <p1 x="360" y="700"/>
      <p2 x="360" y="720"/>
    </wire>
    <wire>
      <p1 x="1000" y="140"/>
      <p2 x="1000" y="240"/>
    </wire>
    <wire>
      <p1 x="2920" y="40"/>
      <p2 x="2920" y="60"/>
    </wire>
    <wire>
      <p1 x="2920" y="-240"/>
      <p2 x="2920" y="-220"/>
    </wire>
    <wire>
      <p1 x="2920" y="60"/>
      <p2 x="2920" y="320"/>
    </wire>
    <wire>
      <p1 x="3820" y="100"/>
      <p2 x="3820" y="240"/>
    </wire>
    <wire>
      <p1 x="3180" y="100"/>
      <p2 x="3180" y="220"/>
    </wire>
    <wire>
      <p1 x="1520" y="420"/>
      <p2 x="1520" y="560"/>
    </wire>
    <wire>
      <p1 x="1520" y="560"/>
      <p2 x="1520" y="1040"/>
    </wire>
    <wire>
      <p1 x="2160" y="320"/>
      <p2 x="2160" y="380"/>
    </wire>
    <wire>
      <p1 x="2160" y="400"/>
      <p2 x="2160" y="560"/>
    </wire>
    <wire>
      <p1 x="3060" y="160"/>
      <p2 x="3060" y="520"/>
    </wire>
    <wire>
      <p1 x="1780" y="440"/>
      <p2 x="1780" y="460"/>
    </wire>
    <wire>
      <p1 x="-760" y="400"/>
      <p2 x="-760" y="640"/>
    </wire>
    <wire>
      <p1 x="2680" y="240"/>
      <p2 x="2680" y="440"/>
    </wire>
    <wire>
      <p1 x="380" y="480"/>
      <p2 x="380" y="580"/>
    </wire>
    <wire>
      <p1 x="380" y="580"/>
      <p2 x="380" y="740"/>
    </wire>
    <wire>
      <p1 x="380" y="740"/>
      <p2 x="380" y="760"/>
    </wire>
    <wire>
      <p1 x="1020" y="120"/>
      <p2 x="1020" y="260"/>
    </wire>
    <wire>
      <p1 x="2940" y="-220"/>
      <p2 x="2940" y="60"/>
    </wire>
    <wire>
      <p1 x="1660" y="480"/>
      <p2 x="1660" y="660"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>